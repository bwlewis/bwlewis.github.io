<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<!-- 
    Model SR2 SVG/Javascript Slide Rule
    Copyright (C) 2007 Bryan W. Lewis <blewis@illposed.net>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head><title>Model SR2</title>

</head>

<body>
An experiment in programming SVG just for fun...
<br/>
<br/>
<svg onload="init(evt)" xmlns="http://www.w3.org/2000/svg"
xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve"
width="1150" height="265"> 

<defs>
	<clipPath id="clip1" shape-rendering="optimizeSpeed">
		<rect x="0" y="0" width="200" height="70" />
	</clipPath>
	<clipPath id="clip2" shape-rendering="optimizeSpeed">
		<rect x="0" y="0" width="200" height="100" />
	</clipPath>
	<linearGradient id = "gr1" x1 = "50%" y1 = "0%" x2 = "50%" y2 = "100%">
		<stop stop-color = "cadetblue" offset = "0%"/>
		<stop stop-color = "cadetblue" offset = "50%"/>
		<stop stop-color = "white" offset = "60%"/>
	</linearGradient>
	<linearGradient id = "gr2" x1 = "50%" y1 = "0%" x2 = "50%" y2 = "100%">
		<stop stop-color = "white" offset = "0%"/>
		<stop stop-color = "white" offset = "50%"/>
		<stop stop-color = "cadetblue" offset = "60%"/>
	</linearGradient>
</defs>

<script xlink:href="./sprintf.js"/>
<script xlink:href="examples.js"/>

<script type="text/ecmascript">
  <![CDATA[

	const xmlns="http://www.w3.org/2000/svg";
	const XLINK = "http://www.w3.org/1999/xlink";
	const pichar = unescape("%u03c0");  // Unicode pi
	var stator, cursor, slider, bubble, decimal, slLabel, stLabel;
	var dx;
	// focus tracks which component (stator, cursor, slider) 
	// is being moved just now
	var focus;
	// left and top_edge track the stator, cursor and slider
	// coordinates relative to the svg parent document
	var left_edge = new Array();
	var top_edge = new Array();

	var svgDocument;
	var ln10;
	var offset=50;
	var slength=1000;

	var showDigits=false;
	var magnify=0;

	function init(evt) {
		svgDocument = evt.target.ownerDocument;
		stator = document.getElementById('stator');
		slider = document.getElementById('slider');
		cursor = document.getElementById('cursor');
		bubble = document.getElementById('bubble');
		decimal = document.getElementById('decimal');
		stLabel = document.getElementById('stLabel');
		slLabel = document.getElementById('slLabel');
// NB DOMMouseScroll is used by Firefox; mousewheel by Safari and Opera.
// The browsers also interpret the event in different ways, sadly.
		slider.addEventListener("mousedown",mousedown_listener,true);
		slider.addEventListener("DOMMouseScroll",scroll_listener,true);
		slider.addEventListener("mousewheel",scroll_listener,true);
		cursor.addEventListener("mousedown",mousedown_listener,true);
		cursor.addEventListener("DOMMouseScroll",scroll_listener,true);
		cursor.addEventListener("mousewheel",scroll_listener,true);
		stator.addEventListener("mousedown",mousedown_listener,true);
		stator.addEventListener("DOMMouseScroll",scroll_listener,true);
		stator.addEventListener("mousewheel",scroll_listener,true);
		bubble.addEventListener("click",bubble_listener,false);
		bubble.addEventListener("mouseover",hover,true);
		bubble.addEventListener("mouseout",hoverout,false);
		decimal.addEventListener("click",decimal_listener,false);
		decimal.addEventListener("mouseover",hover,true);
		decimal.addEventListener("mouseout",hoverout,false);
		slLabel.addEventListener("mouseover",hover,true);
		slLabel.addEventListener("mouseout",hoverout,false);
		slLabel.addEventListener("click",rescale,true);
		stLabel.addEventListener("mouseover",hover,true);
		stLabel.addEventListener("mouseout",hoverout,false);
		stLabel.addEventListener("click",rescale,true);

		ln10=Math.log(10);
		left_edge[0]=10;
		left_edge[1]=10;
		left_edge[2]=460;
		top_edge[0]=30;
		top_edge[1]=80;
		top_edge[2]=5;
		focus_index=0;

		// Can't call the scale functions directly from the onload function
		// due to a bug in Firefox. Instead, we call them indirectly from a
		// timer function.
		window.setTimeout ("logscale();",100);
		window.setTimeout ("powerscale(2);",100);
	}

	function addPath (obj, path) {
		var p = svgDocument.createElementNS(xmlns,"path");
		p.setAttribute("d",path);
		p.setAttribute ("stroke-width",0.5);
		p.setAttribute ("stroke","black");
		p.setAttribute ("opacity",1);
		obj.appendChild(p);
	}

	function addLine (obj, x1, x2, y1, y2) {
		var e = svgDocument.createElementNS(xmlns,"line");
		e.setAttribute ("x1",x1);
		e.setAttribute ("x2",x1);
		e.setAttribute ("y1",y1);
		e.setAttribute ("y2",y2);
		e.setAttribute ("stroke-width",0.5);
		e.setAttribute ("stroke","black");
		e.setAttribute ("opacity",1);
		obj.appendChild(e);
	}

	function addLabel (obj, x, y,val, size) {
		var label = svgDocument.createTextNode(val);
		var l = svgDocument.createElementNS(xmlns,"text");
		l.setAttribute ("x",x);
		l.setAttribute ("y",y);
		l.setAttribute ("stroke-width",0.5);
		l.setAttribute ("stroke","black");
		l.setAttribute ("fill","black");
		l.setAttribute ("opacity",1);
		l.setAttribute ("font-size",size);
		l.setAttribute ("font-family","sans-serif");
		l.appendChild(label);
		obj.appendChild(l);
	}

	function removeMany (obj, j) {
		if (obj.hasChildNodes()) 
			while (obj.childNodes.length>j) obj.removeChild(obj.lastChild);
	}

	// Plot the primary scale (C/D)
	function logscale () {
		var x, ax, ax2, v,w,xl,j,k,l;
		var slbox = slider.getBBox();
		var stbox = stator.getBBox();

		// Axis length scale
		var s = slength;
		var z = s/2;
		// Axis label number format
		var f="%d";

		var Cpath, Dpath, Apath, Bpath;
		Cpath="";
		Dpath="";

		for (j=1;j<11;j++) {
			w=Math.log(j)/ln10;
			x=w*s + offset;
			ax=(w*s)/2 + offset;
			ax2=ax+z;

			v=Math.exp(w*ln10);
			if(v>10) v=1;
			v=Math.round(v*10)/10
			xl=sprintf(f,v);

			Cpath=Cpath+" M"+(slbox.x+x)+","+(slbox.height-18) + 
						" L"+(slbox.x+x)+","+(slbox.height);
			Dpath=Dpath+" M"+(stbox.x+x)+","+(stbox.y+150) + 
						" L"+(stbox.x+x)+","+(stbox.y+168);

			addLabel(slider, slbox.x+x-4,slbox.y+76,xl,14);
			addLabel(stator, stbox.x+x-4,stbox.y+182,xl,14);
		}
		// Special tick: pi
		w=Math.log(3.14159265)/ln10;
		x=w*s + offset;
		addLine(slider,slbox.x+x,slbox.x+x,slbox.height-15,slbox.height);
		addLine(stator,stbox.x+x,stbox.x+x,stbox.y+150,stbox.y+165);
		addLabel(slider, slbox.x+x-4,slbox.y+82,pichar,11);
		addLabel(stator, stbox.x+x-4,stbox.y+176,pichar,11);

		for (k=1;k<10;k++) {
		  if (k<5) l=0.1;
		  else l=0.2;
		  for (j=k+l;j<k+0.99;j=j+l) {
			w=Math.log(j)/ln10;
			x=w*s + offset;
			ax=(w*s)/2 + offset;
			ax2=ax+z;
			v=Math.round((j-1)*10);
			xl=sprintf(f,v);

			Cpath=Cpath+" M"+(slbox.x+x)+","+(slbox.height-12) + 
						" L"+(slbox.x+x)+","+(slbox.height);
			Dpath=Dpath+" M"+(stbox.x+x)+","+(stbox.y+150) + 
						" L"+(stbox.x+x)+","+(stbox.y+162);
			if (k==1) {
				addLabel(slider, slbox.x+x-4,slbox.y+82,xl,12);
				addLabel(stator, stbox.x+x-4,stbox.y+176,xl,12);
			}
		  }
		}
		for (j=1.05;j<1.99;j+=0.1) {
			w=Math.log(j)/ln10;
			x=w*s + offset;
			Cpath=Cpath+" M"+(slbox.x+x)+","+(slbox.height-12) + 
						" L"+(slbox.x+x)+","+(slbox.height);
			Dpath=Dpath+" M"+(stbox.x+x)+","+(stbox.y+150) + 
						" L"+(stbox.x+x)+","+(stbox.y+162);
		}

        // The ci scale and labels
        for (j=0.10;j<=0.40;j+=0.005) {
            w=Math.log(1/j)/ln10;
            x=w*s + offset;
            ax=(w*s)/2 + offset;
            ax2=ax+z;
            up=45;

            v=1/Math.exp(w*ln10);
            v=Math.round(v*100)/10
            if(v==10) v=1;
            xl=sprintf(f,v);
            if (Math.abs(Math.round(j*10) - (j*10)) < 0.01) {
                up=48;
                addLabel(slider, slbox.x+x-3,slbox.y+50,xl,8);
            }

            Cpath=Cpath+" M"+(slbox.x+x)+","+(slbox.height-up) +
                        " L"+(slbox.x+x)+","+(slbox.height-40);
        }
        for (j=0.40;j<=1.01;j+=0.01) {
            w=Math.log(1/j)/ln10;
            x=w*s + offset;
            ax=(w*s)/2 + offset;
            ax2=ax+z;
            up=45;

            v=1/Math.exp(w*ln10);
            v=Math.round(v*100)/10
            if(v==10) v=1;
            xl=sprintf(f,v);
            if (Math.abs(Math.round(j*10) - (j*10)) < 0.01) {
                up=48;
                addLabel(slider, slbox.x+x-3,slbox.y+50,xl,8);
            }

            Cpath=Cpath+" M"+(slbox.x+x)+","+(slbox.height-up) +
                        " L"+(slbox.x+x)+","+(slbox.height-40);
        }
		addPath(slider,Cpath);
		addPath(stator,Dpath);
	}


	// The squared (or other power) scale (A/B/K)
	// When power=2, we set a linear scale on the slider (L).
	function powerscale (power) {
		var ax, ax2, v,w,xl,j,k,l,h;
		var slbox = slider.getBBox();
		var stbox = stator.getBBox();

		// Axis length scale
		var s = slength;
		var z = slength/power;
		// Axis label number format
		var f="%d";

		var Apath, Bpath;
		Apath="";
		Bpath="";

		for (j=1;j<11;j++) {
			w=Math.log(j)/ln10;
			x=(j/10)*s + offset;
			ax=(w*s)/power + offset;

			v=Math.exp(w*ln10);
			if(v>10) v=1;
			v=Math.round(v*10)/10
			xl=sprintf(f,v);

			if (power < 3) {
				Bpath=Bpath+" M"+(slbox.x+ax)+","+(slbox.y) + 
						" L"+(slbox.x+ax)+","+(slbox.y+18);
				addLabel(slider, slbox.x+ax-4,slbox.y+32,xl,14);
			}
			else {
				Bpath=Bpath+" M"+(slbox.x+x)+","+(slbox.y) + 
						" L"+(slbox.x+x)+","+(slbox.y+18);
				addLabel(slider, slbox.x+x-4,slbox.y+32,xl,14);
			}
			Apath=Apath+" M"+(stbox.x+ax)+","+32 + 
					" L"+(stbox.x+ax)+","+50;
			addLabel(stator, stbox.x+ax-4,stbox.y+28,xl,14);
			if (j>0) {
			  for (k=1;k<power;k++) {
				if(power<3){
					Bpath=Bpath+" M"+(slbox.x+ax+z*k)+","+(slbox.y) + 
								" L"+(slbox.x+ax+z*k)+","+(slbox.y+18);
					addLabel(slider, slbox.x+ax+z*k-4,slbox.y+32,xl,14);
				}
				Apath=Apath+" M"+(stbox.x+ax+z*k)+","+32 + 
						" L"+(stbox.x+ax+z*k)+","+50;
				addLabel(stator, stbox.x+ax+z*k-4,stbox.y+28,xl,14);
			  }
			}
		}

		for (k=1;k<10;k++) {
		  if (k<5) l=0.1;
		  else l=0.2;
		  for (j=k+l;j<k+0.99;j=j+l) {
			w=Math.log(j)/ln10;
			x=(j/10)*s + offset;
			ax=(w*s)/power + offset;
			ax2=ax+z;
			v=Math.round((j-1)*10);
			xl=sprintf(f,v);

			if (power<3)
				Bpath=Bpath+" M"+(slbox.x+ax)+","+(slbox.y) + 
						" L"+(slbox.x+ax)+","+(slbox.y+12);
			else
				Bpath=Bpath+" M"+(slbox.x+x)+","+(slbox.y) + 
						" L"+(slbox.x+x)+","+(slbox.y+12);
			Apath=Apath+" M"+(stbox.x+ax)+","+38 + 
					" L"+(stbox.x+ax)+","+50;
			if (j>0) {
			  for (h=1;h<power;h++) {
				if (power<3) {
					Bpath=Bpath+" M"+(slbox.x+ax+z*h)+","+(slbox.y) + 
							" L"+(slbox.x+ax+z*h)+","+(slbox.y+12);
				}
				Apath=Apath+" M"+(stbox.x+ax+z*h)+","+38 + 
						" L"+(stbox.x+ax+z*h)+","+50;
			  }
			}
		  }
		}

		// The [0,1] part of the linear scale
		if(power==3) {
			for (j=1;j<10;j++) {
				w=Math.log(j)/ln10;
				x=(j/100)*s + offset;
				Bpath=Bpath+" M"+(slbox.x+x)+","+slbox.y + 
						" L"+(slbox.x+x)+","+ (slbox.y+12);
			}
			x=offset;
			v=0;
			xl=sprintf(f,v);
			Bpath=Bpath+" M"+(slbox.x+x)+","+slbox.y + 
						" L"+(slbox.x+x)+","+ (slbox.y+12);
			addLabel(slider, slbox.x+x-4,slbox.y+32,xl,14);
		}

		addPath(slider,Bpath);
		addPath(stator,Apath);
	}


	// Return the a log-scale value for a given x-coordinate, 
	// rounded to q decimal places.
	function lookupLog(x,s,q) {
		var w=(x/s)*ln10;
		var x=Math.exp(w);
		x = roundoff(x,q);
		return x;
	}
	// Return the x-coordinate for a given value
	function lookupX (l, s) {
		var w=Math.log(l)/ln10;
		var y=Math.log(1)/ln10;
        var x=(w-y)*s + left_edge[0];
		return x;
	}

	// Return the hairline position over stator 
	function hairlineAD () {
		return left_edge[2]+ 50 - left_edge[0];
	}
	// Return the hairline position over slider 
	function hairlineBC () {
		return left_edge[2]+ 50 - left_edge[1];
	}

	function switchLens () {
		var ALens = document.getElementById("Alens");
		var BLens = document.getElementById("Blens");
		var CLens = document.getElementById("Clens");
		var DLens = document.getElementById("Dlens");
		if (magnify==2) {
			var slView = document.getElementById("slView");
			var stView = document.getElementById("stView");
			CLens.removeChild(slView);
			DLens.removeChild(stView);
			var x = svgDocument.createElementNS(xmlns, "use");
			var e = -left_edge[2] - 50;
			bubble.setAttribute("fill","url(#gr1)");
			bubble.setAttribute("fill-opacity","0.45");
			x.setAttribute("id","slView");
			x.setAttributeNS(XLINK,"href","#slider");
			x.setAttribute("transform","scale(2.0,2) translate("+e+",-79)");
			var ax = svgDocument.createElementNS(xmlns, "use");
			ax.setAttribute("id","stView");
			ax.setAttributeNS(XLINK,"href","#stator");
			ax.setAttribute("transform","scale(2.0,2) translate("+e+",-42)");
			BLens.appendChild(x);
			ALens.appendChild(ax);
		}
		else if (magnify==1) {
			var  x = svgDocument.createElementNS(xmlns, "use");
			var ax = svgDocument.createElementNS(xmlns, "use");
			var e = -left_edge[2] - 50;
			bubble.setAttribute("fill","url(#gr2)");
			bubble.setAttribute("fill-opacity","0.45");
			x.setAttribute("id","slView");
			x.setAttributeNS(XLINK,"href","#slider");
			x.setAttribute("transform","scale(2.0,2) translate("+e+",-130)");
			ax.setAttribute("id","stView");
			ax.setAttributeNS(XLINK,"href","#stator");
			ax.setAttribute("transform","scale(2.0,2) translate("+e+",-180)");
			CLens.appendChild(x);
			DLens.appendChild(ax);
		}
		else {
			var slView = document.getElementById("slView");
			var stView = document.getElementById("stView");
			BLens.removeChild(slView);
			ALens.removeChild(stView);
			bubble.setAttribute("fill","white");
			bubble.setAttribute("fill-opacity","0.75");
		}
	}

	function decimal_listener (evt) {
		showDigits=!showDigits;
		if (showDigits) {
			decimal.setAttribute("fill","lightblue");
			digital ();
		}
		else {
			svgDocument.getElementById("AC").firstChild.data = " ";
			svgDocument.getElementById("BC").firstChild.data = " ";
			svgDocument.getElementById("CC").firstChild.data = " ";
			svgDocument.getElementById("DC").firstChild.data = " ";
			decimal.setAttribute("fill","white");
		}
	}

	function hover (evt) {
		this.setAttribute("stroke-width","2");
	}
	function hoverout (evt) {
		this.setAttribute("stroke-width","0.5");
	}

	function rescale (evt) {
		switch(slLabel.firstChild.data) {
		case ("B"):
			stLabel.firstChild.data = "K";
			slLabel.firstChild.data = "L";
			removeMany(stator, 15);
			removeMany(slider, 8);
			logscale();
			powerscale(3);
			break;
		case ("L"):
			slLabel.firstChild.data = "B";
			stLabel.firstChild.data = "A";
			removeMany(stator, 15);
			removeMany(slider, 8);
			logscale();
			powerscale(2);
			break;
		default:
		}
		if (showDigits) digital ();
	}

	function bubble_listener (evt) {
		magnify=(magnify+1)%3;
		switchLens ();
	}
	
	function mousedown_listener (evt) {
		dx = evt.clientX;
		focus = this; 
		dx = evt.clientX - left_edge[get_focus_index(this)];
		document.addEventListener("mousemove", mousemove_listener, true);
		document.addEventListener("mouseup", mouseup_listener, true);
	}

	function get_focus_index (object) {
		var x;
		if(object==stator) x=0;
		else if(object==slider) x=1;
		else if(object==cursor) x=2;
		return x;
	}

	function scroll_listener (evt) {
		focus = this; 
		var x = 0;
		if (evt.detail) 
			x = evt.detail/3;
		else
			x = evt.wheelDelta/40;
		x = x + left_edge[get_focus_index(this)];
		translate (focus, x);
	}

	function mouseup_listener (evt) {
		document.removeEventListener("mousemove", mousemove_listener, true);
		document.removeEventListener("mouseup", mouseup_listener, true);
		focus = null;
	}

	function mousemove_listener (evt) {
//		var id = focus.ownerSVGElement.suspendRedraw(1000);
		translate (focus, evt.clientX-dx);
//		focus.ownerSVGElement.unsuspendRedraw(id);
	}

	function translate (obj, x) {
		var findex = get_focus_index(obj);
		left_edge[findex]=x;
		obj.setAttribute("transform","translate(" + x + "," + 
								top_edge[findex] + ")");
		if (showDigits) digital ();
		if ((magnify==2)&&(obj==cursor)) {
			var slv = document.getElementById("slView");
			var slt = document.getElementById("stView");
			slv.setAttribute("transform","scale(2.0,2) translate("+(-x-50)+",-79)");
			slt.setAttribute("transform","scale(2.0,2) translate("+(-x-50)+",-42)");
		}
		if ((magnify==1)&&(obj==cursor)) {
			var slv = document.getElementById("slView");
			var slt = document.getElementById("stView");
			slv.setAttribute("transform","scale(2.0,2) translate("+(-x-50)+",-130)");
			slt.setAttribute("transform","scale(2.0,2) translate("+(-x-50)+",-180)");
		}
	}
	
	function digital () {
		if (stLabel.firstChild.data == "K") 
			svgDocument.getElementById("AC").firstChild.data = 
				"L "+ sprintf("%1.3f",
				Math.log(lookupLog(hairlineAD(),slength,3))/ln10);
		else
			svgDocument.getElementById("AC").firstChild.data = 
				"A "+ sprintf("%1.2f",lookupLog(hairlineAD(),slength/2,2));
		if (slLabel.firstChild.data == "L") 
			svgDocument.getElementById("BC").firstChild.data = 
				"K "+ sprintf("%1.2f",lookupLog(hairlineBC(),slength/3,2));
		else
			svgDocument.getElementById("BC").firstChild.data = 
				"B "+ sprintf("%1.2f",lookupLog(hairlineBC(),slength/2,2));
		svgDocument.getElementById("CC").firstChild.data = 
			"C "+ sprintf("%1.2f",lookupLog(hairlineBC(),slength,2));
		svgDocument.getElementById("DC").firstChild.data = 
			"D "+ sprintf("%1.2f",lookupLog(hairlineAD(),slength,2));
	}

	function roundoff (y, dp) {
		var dp10=Math.pow(10,dp);
		var x=Math.round(y*dp10)/dp10
		return x;
	}

	function noop() { }
	
	function animateTo(obj,l,next) {
		var y=left_edge[get_focus_index(obj)];
		var d = l-y;
		var sd = 0;
		if (d!=0) sd=Math.abs(d)/d;
		var ad = d*sd;
		var h=20*sd;
		if(ad<50) h=5*sd;
		else if(ad<20) h=sd;
		translate(obj,y+h);
		if(ad>5) {
			setTimeout("animateTo(" +obj.id+ "," +l+ ",\"" +next+ "\");",100);
		}
		else { 
			// Settle position
			translate(obj,l);
			// On to the next procedure
//			eval(next);
			setTimeout(next,777);
		}
	}

  ]]>
</script>


<g id="stator" transform="translate(10,30)">
	<rect x="0" y="0" width="1100" height="200" fill="cornsilk" stroke="black" stroke-width="0.5" opacity="1" />
	<line x1="50" x2="1050" y1="50" y2="50" fill="black" stroke="black" stroke-width="0.5" opacity="1"/>
	<line x1="50" x2="1050" y1="150" y2="150" fill="black" stroke="black" stroke-width="0.5" opacity="1"/>
	<text x="15" y="28" id="stLabel" fill="black" stroke-width="0.5" stroke="black" font-size="16" font-family="sans-serif">A</text>
	<text x="15" y="180" fill="black"  stroke-width="0.5" stroke="black" font-size="16" font-family="sans-serif">D</text>
	<text x="150" y="195" fill="gray"  stroke-width="0.1" stroke="gray" font-size="8" font-family="sans-serif">MADE IN  U.S.A.</text>
	<text x="150" y="102" fill="black" stroke-width="0.3" stroke="black" font-size="10" font-family="sans-serif">
	<tspan>I L L P O S E D . N E T  </tspan>
	<tspan font-size="14">   </tspan>
	<tspan></tspan>
	</text>
</g>

<g id="slider" transform="translate(10,80)">
	<rect x="0" y="0" width="1100" height="100" fill="white" stroke="black" stroke-width="0.5" opacity="1" />
	<text x="15" y="85" fill="black" stroke-width="0.5" stroke="black" font-size="16" font-family="sans-serif">C</text>
	<text x="15" id="slLabel" y="32" fill="black" stroke-width="0.5" stroke="black" font-size="16" font-family="sans-serif">B</text>
    <text x="15" y="58" fill="black" stroke-width="0.5" stroke="black" font-size="10" font-family="sans-serif">CI</text>
</g>

<g id="cursor" transform="translate(460,5)">
	<g id="Alens" clip-path="url(#clip1)" transform="translate(0,9)" />
	<g id="Blens" clip-path="url(#clip2)" transform="translate(0,73)" />
	<g id="Clens" clip-path="url(#clip2)" transform="translate(0,75)" />
	<g id="Dlens" clip-path="url(#clip1)" transform="translate(0,175)" />
	<rect x="0" y="0" width="200" height="250" fill="darkturquoise" stroke="black" stroke-width="0.9" opacity="0.05" />
	<line x1="100" y1="7" x2="100" y2="243" stroke="red" stroke-width="1"/>
	<polyline points="0,25 0,0 200,0 200,25"
					stroke="black" stroke-width="0.5" opacity="1" 
					fill="darkturquoise" fill-opacity="0.05"/>
	<polyline points="0,225 0,250 200,250 200,225"
					stroke="black" stroke-width="0.5" opacity="1" 
					fill="darkturquoise" fill-opacity="0.05"/>
	<text id="AC" x="5" y="12" fill="black" stroke-width="0.4" stroke="darkgreen" font-size="9" font-family="sans-serif" opacity="0.8">  </text>
	<text id="BC" x="145" y="12" fill="black" stroke-width="0.4" stroke="darkgreen" font-size="9" font-family="sans-serif" opacity="0.8">  </text>
	<text id="CC" x="5" y="245" fill="black" stroke-width="0.4" stroke="darkgreen" font-size="9" font-family="sans-serif" opacity="0.8">  </text>
	<text id="DC" x="145" y="245" fill="black" stroke-width="0.4" stroke="darkgreen" font-size="9" font-family="sans-serif" opacity="0.8">  </text>
	<circle id="bubble" cx="35" cy="125" r="9" fill="white" stroke-width="0.5" stroke="darkgreen" opacity="0.75" />
	<circle id="decimal" cx="165" cy="125" r="9" fill="white" stroke-width="0.5" stroke="darkgreen" opacity="0.75" />
</g>
</svg>
<br/>
<br/>
<center>
<font size="2">
<table border="0">
<tr valign="top">
<td>&sdot;
Make fine adjustments with the scroll wheel 
<font size="1"><br/></font>
&sdot; Press the circles in the cursor for magnify, digital effects </td>
<td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td>&sdot;
Press on a scale letter to change scales (A/B, L/K) 
<font size="1"><br/></font>
&sdot;
Operational in at least the Chrome, Firefox, Safari and Opera browsers (sorry, not IE).</td>
</tr>
</table>
</font>
</center>
<form>
<br />
<input type="button" value="Reset" onclick="slreset();modDiv(null);" />
<input type="button" value="Specifications" onclick="modDiv('./specifications.html');" />
<input type="button" value="Tour" onclick="modDiv('./tour.html');" />
<input type="button" value="Example 1" onclick="modDiv('./example1.html');" />
<input type="button" value="Example 2" onclick="modDiv('./example2.html');" />
<input type="button" value="Example 3" onclick="modDiv('./example3.html');" />
<input type="button" value="References" onclick="modDiv('./references.html');" />
</form>
<div id="examples" />
</body></html>
<!--
vim:ts=4
-->

